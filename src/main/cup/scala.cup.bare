package wanghg.rhigosis;

// -----------------------------------------------------------------------------
// terminals
// -----------------------------------------------------------------------------

// $ cat scala.cup | tr ' ' '\n' | grep '^[A-Z_]\+$' | sort -u | sed -e 's/^/terminal /' -e 's/$/;/'

terminal ABSTRACT;
terminal ASTERISK;
terminal AT;
terminal BOOLEAN;
terminal CASE;
terminal CATCH;
terminal CHARACTER;
terminal CLASS;
terminal COLON;
terminal COMMA;
terminal DEF;
terminal DO;
terminal DOT;
terminal ELSE;
terminal EQ;
terminal EXCLAM;
terminal EXTENDS;
terminal FINAL;
terminal FINALLY;
terminal FLOAT;
terminal FOR;
terminal FORSOME;
terminal HASH;
terminal ID;
terminal IF;
terminal IMPLICIT;
terminal IMPORT;
terminal INTEGER;
terminal LARROW;
terminal LAZY;
terminal LBOUNDS;
terminal LBRACE;
terminal LBRACK;
terminal LPAREN;
terminal MATCH;
terminal MINUS;
terminal NEW;
terminal NL;
terminal NULL;
terminal OBJECT;
terminal OR;
terminal OVERRIDE;
terminal PACKAGE;
terminal PLUS;
terminal PRIVATE;
terminal PROTECTED;
terminal RBRACE;
terminal RBRACE_NL;
terminal RBRACK;
terminal RDARROW;
terminal RETURN;
terminal RPAREN;
terminal RPAREN_NL;
terminal SEALED;
terminal SEMI;
terminal STRING;
terminal SUPER;
terminal SYMBOL;
terminal THIS;
terminal THROW;
terminal TILDE;
terminal TRAIT;
terminal TRY;
terminal TYPE;
terminal TYPE_NL;
terminal UBOUNDS;
terminal UNDERSCORE;
terminal VAL;
terminal VAR;
terminal VARID;
terminal VBOUNDS;
terminal WHILE;
terminal WITH;
terminal XMLEXPR;
terminal XMLPATTERN;
terminal YIELD;

// -----------------------------------------------------------------------------
// nonterminals
// -----------------------------------------------------------------------------

// $ cat scala.cup | grep '^[^ ]\+ *::=' | sed -E 's/^([^ ]+) *::=.*$/nonterminal \1;/'

nonterminal Literal;
nonterminal QualId;
nonterminal ids;
nonterminal Path;
nonterminal StableId;
nonterminal ClassQualifier;
nonterminal Type;
nonterminal FunctionArgTypes;
nonterminal ParamTypes;
nonterminal ExistentialClause;
nonterminal ExistentialDcls;
nonterminal ExistentialDcl;
nonterminal InfixType;
nonterminal CompoundType;
nonterminal AnnotTypes;
nonterminal AnnotType;
nonterminal SimpleType;
nonterminal TypeArgs;
nonterminal Types;
nonterminal Refinement;
nonterminal RefineStats;
nonterminal RefineStat;
nonterminal TypePat;
nonterminal Ascription;
nonterminal Annotations;
nonterminal Expr;
nonterminal Expr1;
nonterminal PostfixExpr;
nonterminal InfixExpr;
nonterminal PrefixExpr;
nonterminal SimpleExpr;
nonterminal SimpleExpr1;
nonterminal Exprs;
nonterminal ArgumentExprs;
nonterminal BlockExpr;
nonterminal Block;
nonterminal BlockStats;
nonterminal BlockStat;
nonterminal BDefs;
nonterminal TmplDefs;
nonterminal TmplDefs1;
nonterminal ResultExpr;
nonterminal Enumerators;
nonterminal Generator;
nonterminal CaseClauses;
nonterminal CaseClause;
nonterminal Guard;
nonterminal Pattern;
nonterminal Pattern1;
nonterminal Pattern2;
nonterminal Pattern3;
nonterminal SimplePattern;
nonterminal Patterns;
nonterminal TypeParamClause;
nonterminal VariantTypeParams;
nonterminal FunTypeParamClause;
nonterminal TypeParams;
nonterminal VariantTypeParam;
nonterminal TypeParam;
nonterminal TypeParam1;
nonterminal ParamClauses;
nonterminal ParamClause;
nonterminal Params;
nonterminal Param;
nonterminal ParamType;
nonterminal ClassParamClauses;
nonterminal ClassParamClause;
nonterminal ClassParams;
nonterminal ClassParam;
nonterminal ClassParam1;
nonterminal Bindings;
nonterminal Bindings1;
nonterminal Binding;
nonterminal Modifier;
nonterminal LocalModifier;
nonterminal AccessModifier;
nonterminal AccessQualifier;
nonterminal Annotation;
nonterminal ConstrAnnotation;
nonterminal TemplateBody;
nonterminal TemplateBody1;
nonterminal TemplateStat;
nonterminal Defs;
nonterminal Defs1;
nonterminal Dcls;
nonterminal Dcls1;
nonterminal SelfType;
nonterminal Import;
nonterminal ImportExpr;
nonterminal ImportSelectors;
nonterminal ImportSelectors1;
nonterminal ImportSelector;
nonterminal Dcl;
nonterminal ValDcl;
nonterminal VarDcl;
nonterminal FunDcl;
nonterminal FunSig;
nonterminal TypeDcl;
nonterminal PatVarDef;
nonterminal Def;
nonterminal PatDef;
nonterminal PatDef1;
nonterminal VarDef;
nonterminal FunDef;
nonterminal TypeDef;
nonterminal TmplDef;
nonterminal ClassDef;
nonterminal ConstrAnnotations;
nonterminal TraitDef;
nonterminal ObjectDef;
nonterminal ClassTemplateOpt;
nonterminal TraitTemplateOpt;
nonterminal ClassTemplate;
nonterminal TraitTemplate;
nonterminal ClassParents;
nonterminal TraitParents;
nonterminal Constr;
nonterminal EarlyDefs;
nonterminal EarlyDefs1;
nonterminal EarlyDef;
nonterminal EarlyDef1;
nonterminal ConstrExpr;
nonterminal ConstrBlock;
nonterminal ConstrBlock1;
nonterminal SelfInvocation;
nonterminal TopStatSeq;
nonterminal TopStat;
nonterminal TopStat1;
nonterminal TopStat2;
nonterminal Packaging;
nonterminal PackageObject;
nonterminal CompilationUnit;

// -----------------------------------------------------------------------------
// precedences
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// productions
// -----------------------------------------------------------------------------

start with CompilationUnit;

Literal           ::=        INTEGER
                    |  MINUS INTEGER
                    |        FLOAT
                    |  MINUS FLOAT
                    |  BOOLEAN
                    |  CHARACTER
                    |  STRING
                    |  SYMBOL
                    |  NULL
                    ;

QualId            ::=  ID
                    |  QualId DOT ID
                    ;

ids               ::=  ID
                    |  ids COMMA ID
                    ;

Path              ::=  StableId
                    |         THIS
                    |  ID DOT THIS
                    ;

StableId          ::=  ID
                    |  Path DOT ID
                    |         SUPER                DOT ID
                    |         SUPER ClassQualifier DOT ID
                    |  ID DOT SUPER                DOT ID
                    |  ID DOT SUPER ClassQualifier DOT ID
                    ;

ClassQualifier    ::=  LBRACK ID RBRACK
                    ;

Type              ::=  FunctionArgTypes RDARROW Type
                    |  InfixType
                    |  InfixType ExistentialClause
                    ;

FunctionArgTypes  ::=  InfixType
                    |  LPAREN            RPAREN
                    |  LPAREN ParamTypes RPAREN
                    ;

ParamTypes        ::=  ParamType
                    |  ParamTypes COMMA ParamType
                    ;

ExistentialClause ::=  FORSOME LBRACE ExistentialDcls RBRACE
                    ;

ExistentialDcls   ::=  ExistentialDcl
                    |  ExistentialDcls SEMI ExistentialDcl
                    ;

ExistentialDcl    ::=  TYPE TypeDcl
                    |  VAL ValDcl
                    ;

InfixType         ::=  CompoundType
                    |  InfixType    ID    CompoundType
                    |  InfixType    ID NL CompoundType
                    ;

CompoundType      ::=  AnnotTypes
                    |  AnnotTypes Refinement
                    |  Refinement
                    ;

AnnotTypes        ::=  AnnotType
                    |  AnnotTypes WITH AnnotType
                    ;

AnnotType         ::=  SimpleType
                    |  AnnotType Annotation
                    ;

SimpleType        ::=  SimpleType TypeArgs
                    |  SimpleType HASH ID
                    |  StableId
                    |  Path DOT TYPE
                    |  LPAREN Types RPAREN
                    ;

TypeArgs          ::=  LBRACK Types RBRACK
                    ;

Types             ::=  Type
                    |  Types COMMA Type
                    ;

Refinement        ::=     LBRACE RefineStats RBRACE
                    |  NL LBRACE RefineStats RBRACE
                    ;

RefineStats       ::=  RefineStat
                    |  RefineStats SEMI RefineStat
                    ;

RefineStat        ::=
                    |  Dcl
                    |  TYPE TypeDef
                    ;

TypePat           ::=  Type
                    ;

Ascription        ::=  COLON InfixType
                    |  COLON Annotations
                    |  COLON UNDERSCORE ASTERISK
                    ;

Annotations       ::=  Annotation
                    |  Annotations Annotation
                    ;

Expr              ::=                       UNDERSCORE RDARROW Expr
                    |                    ID            RDARROW Expr
                    |           IMPLICIT ID            RDARROW Expr
                    |  Bindings                        RDARROW Expr
                    |  Expr1
                    ;

Expr1             ::=  IF LPAREN Expr RPAREN_NL Expr
                    |  IF LPAREN Expr RPAREN_NL Expr      ELSE Expr
                    |  IF LPAREN Expr RPAREN_NL Expr SEMI ELSE Expr
                    |  WHILE LPAREN Expr RPAREN_NL Expr
                    |  TRY                     Expr
                    |  TRY                     Expr                                 FINALLY Expr
                    |  TRY                     Expr CATCH LBRACE CaseClauses RBRACE
                    |  TRY                     Expr CATCH LBRACE CaseClauses RBRACE FINALLY Expr
                    |  TRY LBRACE Block RBRACE
                    |  TRY LBRACE Block RBRACE                                      FINALLY Expr
                    |  TRY LBRACE Block RBRACE      CATCH LBRACE CaseClauses RBRACE
                    |  TRY LBRACE Block RBRACE      CATCH LBRACE CaseClauses RBRACE FINALLY Expr
                    |  DO Expr      WHILE LPAREN Expr RPAREN
                    |  DO Expr SEMI WHILE LPAREN Expr RPAREN
                    |  FOR                              LBRACE Enumerators RBRACE_NL       Expr
                    |  FOR                              LBRACE Enumerators RBRACE_NL YIELD Expr
                    |  FOR LPAREN Enumerators RPAREN_NL                                    Expr
                    |  FOR LPAREN Enumerators RPAREN_NL                              YIELD Expr
                    |  THROW Expr
                    |  RETURN
                    |  RETURN Expr
                    |                 ID EQ Expr
                    |  SimpleExpr DOT ID EQ Expr
                    |  SimpleExpr1 ArgumentExprs EQ Expr
                    |  PostfixExpr
                    |  PostfixExpr Ascription
                    |  PostfixExpr MATCH LBRACE CaseClauses RBRACE
                    ;

PostfixExpr       ::=  InfixExpr
                    |  InfixExpr ID
                    |  InfixExpr ID NL
                    ;

InfixExpr         ::=  PrefixExpr
                    |  InfixExpr ID    InfixExpr
                    |  InfixExpr ID NL InfixExpr
                    ;

PrefixExpr        ::=                          SimpleExpr
                    |                   EXCLAM SimpleExpr
                    |             TILDE        SimpleExpr
                    |        PLUS              SimpleExpr
                    |  MINUS                   SimpleExpr
                    ;

SimpleExpr        ::=  NEW               TemplateBody
                    |  NEW ClassTemplate
                    |  BlockExpr
                    |  SimpleExpr1
                    |  SimpleExpr1 UNDERSCORE
                    ;

SimpleExpr1       ::=  Literal
                    |  Path
                    |  UNDERSCORE
                    |  LPAREN       RPAREN
                    |  LPAREN Exprs RPAREN
                    |  SimpleExpr DOT ID
                    |  SimpleExpr TypeArgs
                    |  SimpleExpr1 ArgumentExprs
                    |  XMLEXPR
                    ;

Exprs             ::=  Expr
                    |  Exprs COMMA Expr
                    ;

ArgumentExprs     ::=  LPAREN       RPAREN
                    |  LPAREN Exprs RPAREN
                    |  LPAREN             PostfixExpr COLON UNDERSCORE ASTERISK RPAREN
                    |  LPAREN Exprs COMMA PostfixExpr COLON UNDERSCORE ASTERISK RPAREN
                    |     BlockExpr
                    |  NL BlockExpr
                    ;

BlockExpr         ::=  LBRACE CaseClauses RBRACE
                    |  LBRACE Block RBRACE
                    ;

Block             ::=  BlockStats
                    |  BlockStats ResultExpr
                    ;

BlockStats        ::=  BlockStat
                    |  BlockStats SEMI BlockStat
                    ;

BlockStat         ::=
                    |  Import
                    |  BDefs
                    |  TmplDefs
                    |  Expr1
                    ;

BDefs              ::=                    LAZY Def
                    |            IMPLICIT      Def
                    | Annotation BDefs
                    ;

TmplDefs          ::=             TmplDefs1
                    |  Annotation TmplDefs
                    ;

TmplDefs1         ::=                TmplDef
                    |  LocalModifier TmplDefs1
                    ;

ResultExpr        ::=  Expr1
                    |                       UNDERSCORE COLON CompoundType RDARROW Block
                    |                    ID            COLON CompoundType RDARROW Block
                    |           IMPLICIT ID            COLON CompoundType RDARROW Block
                    |  Bindings                                           RDARROW Block
                    ;

Enumerators       ::=  Generator
                    |  Enumerators SEMI Generator
                    ;

Generator         ::=  Pattern1 LARROW Expr
                    |  Generator                         SEMI Pattern1 EQ Expr
                    |  Generator                 Guard
                    |  Generator            SEMI Guard
                    ;

CaseClauses       ::=  CaseClause
                    |  CaseClauses CaseClause
                    ;

CaseClause        ::=  CASE Pattern       RDARROW Block
                    |  CASE Pattern Guard RDARROW Block
                    ;

Guard             ::=  IF PostfixExpr
                    ;

Pattern           ::=  Pattern1
                    |  Pattern  OR Pattern1
                    ;

Pattern1          ::=  VARID COLON TypePat
                    |  UNDERSCORE COLON TypePat
                    |  Pattern2
                    ;

Pattern2          ::=  VARID
                    |  VARID AT Pattern3
                    |  Pattern3
                    ;

Pattern3          ::=  SimplePattern
                    |  SimplePattern
                    |  SimplePattern ID    SimplePattern
                    |  SimplePattern ID NL SimplePattern
                    ;

SimplePattern     ::=  UNDERSCORE
                    |  VARID
                    |  Literal
                    |  StableId
                    |  StableId LPAREN          RPAREN
                    |  StableId LPAREN Patterns RPAREN
                    |  StableId LPAREN                         UNDERSCORE ASTERISK RPAREN
                    |  StableId LPAREN                VARID AT UNDERSCORE ASTERISK RPAREN
                    |  StableId LPAREN Patterns COMMA          UNDERSCORE ASTERISK RPAREN
                    |  StableId LPAREN Patterns COMMA VARID AT UNDERSCORE ASTERISK RPAREN
                    |  LPAREN          RPAREN
                    |  LPAREN Patterns RPAREN
                    |  XMLPATTERN
                    ;

Patterns          ::=  Pattern
                    |  Pattern COMMA Patterns
                    |  UNDERSCORE ASTERISK
                    ;

TypeParamClause   ::=  LBRACK VariantTypeParams RBRACK
                    ;

VariantTypeParams ::=  VariantTypeParam
                    |  VariantTypeParams COMMA VariantTypeParam
                    ;

FunTypeParamClause::=  LBRACK TypeParams RBRACK
                    ;

TypeParams        ::=  TypeParam
                    |  TypeParams COMMA TypeParam
                    ;

VariantTypeParam  ::=                        TypeParam
                    |                  MINUS TypeParam
                    |             PLUS       TypeParam
                    |  Annotation VariantTypeParam
                    ;

TypeParam         ::=  TypeParam1
                    |  TypeParam COLON Type
                    ;

TypeParam1        ::=     UNDERSCORE
                    |     UNDERSCORE                               UBOUNDS Type
                    |     UNDERSCORE                  LBOUNDS Type
                    |     UNDERSCORE                  LBOUNDS Type UBOUNDS Type
                    |     UNDERSCORE TypeParamClause
                    |     UNDERSCORE TypeParamClause              UBOUNDS Type
                    |     UNDERSCORE TypeParamClause LBOUNDS Type
                    |     UNDERSCORE TypeParamClause LBOUNDS Type UBOUNDS Type
                    |  ID
                    |  ID                                         UBOUNDS Type
                    |  ID                            LBOUNDS Type
                    |  ID                            LBOUNDS Type UBOUNDS Type
                    |  ID            TypeParamClause
                    |  ID            TypeParamClause              UBOUNDS Type
                    |  ID            TypeParamClause LBOUNDS Type
                    |  ID            TypeParamClause LBOUNDS Type UBOUNDS Type
                    |  TypeParam1 VBOUNDS Type
                    ;

ParamClauses      ::=
                    |                 LPAREN IMPLICIT Params RPAREN
                    |              NL LPAREN IMPLICIT Params RPAREN
                    |  ParamClause ParamClauses
                    ;

ParamClause       ::=     LPAREN        RPAREN
                    |     LPAREN Params RPAREN
                    |  NL LPAREN        RPAREN
                    |  NL LPAREN Params RPAREN
                    ;

Params            ::=  Param
                    |  Params COMMA Param
                    ;

Param             ::=             ID
                    |             ID                 EQ Expr
                    |             ID COLON ParamType
                    |             ID COLON ParamType EQ Expr
                    |  Annotation Param
                    ;

ParamType         ::=  Type
                    |  RDARROW Type
                    |  Type ASTERISK
                    ;

ClassParamClauses ::=
                    |                      LPAREN IMPLICIT ClassParams RPAREN
                    |                   NL LPAREN IMPLICIT ClassParams RPAREN
                    |  ClassParamClause ClassParamClauses
                    ;

ClassParamClause  ::=     LPAREN             RPAREN
                    |     LPAREN ClassParams RPAREN
                    |  NL LPAREN             RPAREN
                    |  NL LPAREN ClassParams RPAREN
                    ;

ClassParams       ::=  ClassParam
                    |  ClassParams COMMA ClassParam
                    ;

ClassParam        ::=             ClassParam1
                    |  Annotation ClassParam
                    ;

ClassParam1       ::=                   ID COLON ParamType
                    |                   ID COLON ParamType EQ Expr
                    |               VAR ID COLON ParamType
                    |               VAR ID COLON ParamType EQ Expr
                    |           VAL     ID COLON ParamType
                    |           VAL     ID COLON ParamType EQ Expr
                    |  Modifier ClassParam1
                    ;

Bindings          ::=  LPAREN Bindings1 RPAREN
                    ;

Bindings1         ::=  Binding
                    |  Bindings1 COMMA Binding
                    ;

Binding           ::=     UNDERSCORE
                    |     UNDERSCORE COLON Type
                    |  ID
                    |  ID            COLON Type
                    ;

Modifier          ::=  LocalModifier
                    |  AccessModifier
                    |  OVERRIDE
                    ;

LocalModifier     ::=  ABSTRACT
                    |  FINAL
                    |  SEALED
                    |  IMPLICIT
                    |  LAZY
                    ;

AccessModifier    ::=          PROTECTED
                    |          PROTECTED AccessQualifier
                    |  PRIVATE
                    |  PRIVATE           AccessQualifier
                    ;

AccessQualifier   ::=  LBRACK    THIS RBRACK
                    |  LBRACK ID      RBRACK
                    ;

Annotation        ::=  AT SimpleType
                    |  Annotation ArgumentExprs
                    ;

ConstrAnnotation  ::=  AT SimpleType ArgumentExprs
                    ;

TemplateBody      ::=     LBRACE          TemplateBody1 RBRACE
                    |     LBRACE SelfType TemplateBody1 RBRACE
                    |  NL LBRACE          TemplateBody1 RBRACE
                    |  NL LBRACE SelfType TemplateBody1 RBRACE
                    ;

TemplateBody1     ::=  TemplateStat
                    |  TemplateBody1 SEMI TemplateStat
                    ;

TemplateStat      ::=
                    |  Import
                    |  Defs
                    |  Dcls
                    |  Expr
                    ;

Defs              ::=                Defs1
                    |  Annotation    Defs
                    |  Annotation NL Defs
                    ;

Defs1             ::=           Def
                    |  Modifier Defs1
                    ;

Dcls              ::=                Dcls1
                    |  Annotation    Dcls
                    |  Annotation NL Dcls
                    ;

Dcls1             ::=           Dcl
                    |  Modifier Dcls1
                    ;

SelfType          ::=  ID            RDARROW
                    |  ID COLON Type RDARROW
                    |  THIS COLON Type RDARROW
                    ;

Import            ::=  IMPORT ImportExpr
                    |  Import COMMA ImportExpr
                    ;

ImportExpr        ::=  StableId DOT               ImportSelectors
                    |  StableId DOT    UNDERSCORE
                    |  StableId DOT ID
                    ;

ImportSelectors   ::=  LBRACE ImportSelectors1 RBRACE
                    ;

ImportSelectors1  ::=                                      UNDERSCORE
                    |                       ImportSelector
                    |  ImportSelector COMMA ImportSelectors1
                    ;

ImportSelector    ::=  ID
                    |  ID            RDARROW UNDERSCORE
                    |  ID RDARROW ID
                    ;

Dcl               ::=  VAL ValDcl
                    |  VAR VarDcl
                    |  DEF FunDcl
                    |  TYPE_NL TypeDcl
                    ;

ValDcl            ::=  ids COLON Type
                    ;

VarDcl            ::=  ids COLON Type
                    ;

FunDcl            ::=  FunSig
                    |  FunSig COLON Type
                    ;

FunSig            ::=  ID                    ParamClauses
                    |  ID FunTypeParamClause ParamClauses
                    ;

TypeDcl           ::=  ID
                    |  ID                              UBOUNDS Type
                    |  ID                 LBOUNDS Type
                    |  ID                 LBOUNDS Type UBOUNDS Type
                    |  ID TypeParamClause
                    |  ID TypeParamClause              UBOUNDS Type
                    |  ID TypeParamClause LBOUNDS Type
                    |  ID TypeParamClause LBOUNDS Type UBOUNDS Type
                    ;

PatVarDef         ::=  VAL PatDef
                    |  VAR VarDef
                    ;

Def               ::=  PatVarDef
                    |  DEF FunDef
                    |  TYPE_NL TypeDef
                    |  TmplDef
                    ;

PatDef            ::=  PatDef1            EQ Expr
                    |  PatDef1 COLON Type EQ Expr
                    ;

PatDef1           ::=  Pattern2
                    |  PatDef1 COMMA Pattern2
                    ;

VarDef            ::=  PatDef
                    |  ids COLON Type EQ UNDERSCORE
                    ;

FunDef            ::=  FunSig            EQ Expr
                    |  FunSig COLON Type EQ Expr
                    |  FunSig    LBRACE Block RBRACE
                    |  FunSig NL LBRACE Block RBRACE
                    |  THIS ParamClause ParamClauses                  ConstrBlock
                    |  THIS ParamClause ParamClauses               NL ConstrBlock
                    |  THIS ParamClause ParamClauses EQ ConstrExpr
                    ;

TypeDef           ::=  ID                 EQ Type
                    |  ID TypeParamClause EQ Type
                    ;

TmplDef           ::=       CLASS ClassDef
                    |  CASE CLASS ClassDef
                    |       OBJECT ObjectDef
                    |  CASE OBJECT ObjectDef
                    |  TRAIT TraitDef
                    ;

ClassDef          ::=  ID                 ConstrAnnotations                ClassParamClauses ClassTemplateOpt
                    |  ID                 ConstrAnnotations AccessModifier ClassParamClauses ClassTemplateOpt
                    |  ID TypeParamClause ConstrAnnotations                ClassParamClauses ClassTemplateOpt
                    |  ID TypeParamClause ConstrAnnotations AccessModifier ClassParamClauses ClassTemplateOpt
                    ;

ConstrAnnotations ::=
                    |  ConstrAnnotation
                    |  ConstrAnnotations ConstrAnnotation
                    ;

TraitDef          ::=  ID                 TraitTemplateOpt
                    |  ID TypeParamClause TraitTemplateOpt
                    ;

ObjectDef         ::=  ID ClassTemplateOpt
                    ;

ClassTemplateOpt  ::=
                    |  EXTENDS ClassTemplate
                    |          TemplateBody
                    |  EXTENDS TemplateBody
                    ;

TraitTemplateOpt  ::=
                    |  EXTENDS TraitTemplate
                    |          TemplateBody
                    |  EXTENDS TemplateBody
                    ;

ClassTemplate     ::=            ClassParents
                    |            ClassParents TemplateBody
                    |  EarlyDefs ClassParents
                    |  EarlyDefs ClassParents TemplateBody
                    ;

TraitTemplate     ::=            TraitParents
                    |            TraitParents TemplateBody
                    |  EarlyDefs TraitParents
                    |  EarlyDefs TraitParents TemplateBody
                    ;

ClassParents      ::=  Constr
                    |  ClassParents WITH AnnotType
                    ;

TraitParents      ::=  AnnotType
                    |  TraitParents WITH AnnotType
                    ;

Constr            ::=  AnnotType
                    |  Constr ArgumentExprs
                    ;

EarlyDefs         ::= LBRACE            RBRACE WITH
                    | LBRACE EarlyDefs1 RBRACE WITH
                    ;

EarlyDefs1        ::= EarlyDef
                    | EarlyDefs1 SEMI EarlyDef
                    ;

EarlyDef          ::=                EarlyDef1
                    |  Annotation    EarlyDef
                    |  Annotation NL EarlyDef
                    ;

EarlyDef1         ::=           PatVarDef
                    |  Modifier EarlyDef1
                    ;

ConstrExpr        ::=  SelfInvocation
                    |  ConstrBlock
                    ;

ConstrBlock       ::=  LBRACE ConstrBlock1 RBRACE
                    ;

ConstrBlock1      ::=  SelfInvocation
                    |  ConstrBlock1 SEMI BlockStat
                    ;

SelfInvocation    ::=  THIS ArgumentExprs
                    |  SelfInvocation ArgumentExprs
                    ;

TopStatSeq        ::=  TopStat
                    |  TopStatSeq SEMI TopStat
                    ;

TopStat           ::=
                    |  TopStat1
                    |  Import
                    |  Packaging
                    |  PackageObject
                    ;

TopStat1          ::=                TopStat2
                    |  Annotation    TopStat1
                    |  Annotation NL TopStat1
                    ;

TopStat2          ::=           TmplDef
                    |  Modifier TopStat2
                    ;

Packaging         ::=  PACKAGE QualId    LBRACE TopStatSeq RBRACE
                    |  PACKAGE QualId NL LBRACE TopStatSeq RBRACE
                    ;

PackageObject     ::=  PACKAGE OBJECT ObjectDef
                    ;

CompilationUnit   ::=                      TopStatSeq
                    |  PACKAGE QualId SEMI CompilationUnit
                    ;

