package wanghg.rhigosis;

// TERMINAL
terminal PACKAGE;
terminal SEMI;
terminal ID;
terminal DOT;
terminal NL;
terminal IMPORT;
terminal COMMA;
terminal LBRACE;
terminal RBRACE;
terminal OBJECT;
terminal CLASS;
terminal CASE;
terminal TRAIT;
terminal OVERRIDE;
terminal AT;
terminal UNDERSCORE;
terminal ABSTRACT;
terminal FINAL;
terminal SEALED;
terminal IMPLICIT;
terminal LAZY;
terminal PRIVATE;
terminal PROTECTED;
terminal HASH;
terminal TYPE;
terminal LPAREN;
terminal RPAREN;
terminal COLON;
terminal ASTERISK;
terminal SUPER;
terminal EXTENDS;
terminal LBRACK;
terminal RBRACK;
terminal THIS;
terminal RDARROW;
terminal _NL_LBRACE;
terminal PLUS;
terminal MINUS;
terminal WITH;
terminal _SelfType;
terminal _RBRACE_WITH;
terminal UBOUNDS;
terminal LBOUNDS;
terminal VBOUNDS;
terminal EQ;
terminal VAR;
terminal VAL;
terminal _LPAREN_IMPLICIT;
terminal _NL_LPAREN_IMPLICIT;
terminal FORSOME;
terminal TILDE;
terminal EXCLAM;
terminal CASE_OBJECT;
terminal CASE_CLASS;
terminal DEF;
// TODO
terminal ExistentialDcl;
terminal Binding;
terminal SimpleExpr;
terminal Pattern;
terminal Guard;
terminal Expr1;
terminal PatVarDef;
terminal FunDef;
terminal TypeDef;
terminal Refinement;
// DONE
nonterminal CompilationUnit;
nonterminal TopStatSeq;
nonterminal QualId;
nonterminal TopStat;
nonterminal _AN_M_TmplDef;
nonterminal _M_TmplDef;
nonterminal Import;
nonterminal Packaging;
nonterminal PackageObject;
nonterminal TmplDef;
nonterminal Modifier;
nonterminal Annotation;
nonterminal ImportExpr;
nonterminal ObjectDef;
nonterminal ClassDef;
nonterminal _A_ClassParamClauses;
nonterminal TraitDef;
nonterminal LocalModifier;
nonterminal AccessModifier;
nonterminal SimpleType;
nonterminal ArgumentExprs;
nonterminal StableId;
nonterminal ImportSelectors;
nonterminal _ImportSelectors;
nonterminal ClassTemplateOpt;
nonterminal TypeParamClause;
nonterminal _TypeParamClause;
nonterminal ClassParamClauses;
nonterminal ConstrAnnotation;
nonterminal TraitTemplateOpt;
nonterminal AccessQualifier;
nonterminal TypeArgs;
nonterminal Path;
nonterminal Types;
nonterminal Exprs;
nonterminal PostfixExpr;
nonterminal BlockExpr;
nonterminal ClassQualifier;
nonterminal ImportSelector;
nonterminal ClassTemplate;
nonterminal TemplateBody;
nonterminal _TemplateBody;
nonterminal VariantTypeParam;
nonterminal ClassParams;
nonterminal ClassParamClause;
nonterminal TraitTemplate;
nonterminal Type;
nonterminal Expr;
nonterminal InfixExpr;
nonterminal CaseClauses;
nonterminal Block;
nonterminal _Block;
nonterminal ClassParents;
nonterminal EarlyDefs;
nonterminal _EarlyDefs;
nonterminal SelfType;
nonterminal TemplateStat;
nonterminal _AN_M_Def;
nonterminal _M_Def;
nonterminal _AN_M_Dcl;
nonterminal _M_Dcl;
nonterminal TypeParam;
nonterminal _TypeParam;
nonterminal ClassParam;
nonterminal _ClassParam;
nonterminal TraitParents;
nonterminal _FunctionArgTypes_withRDARROW;
nonterminal InfixType;
nonterminal ExistentialClause;
nonterminal _ExistentialClause;
nonterminal Bindings;
nonterminal _Bindings;
nonterminal PrefixExpr;
nonterminal CaseClause;
nonterminal BlockStat;
nonterminal _A_Def;
nonterminal _A_LM_TmplDef;
nonterminal _LM_TmplDef;
nonterminal Constr;
nonterminal AnnotType;
nonterminal EarlyDef;
nonterminal _M_PatVarDef;
nonterminal Def;
nonterminal Dcl;
nonterminal ValDcl;
nonterminal VarDcl;
nonterminal FunDcl;
nonterminal TypeDcl;
nonterminal CompoundType;
nonterminal _CompoundType;
// Precedence
precedence left ASTERISK/*used in Type*/;
precedence left ID/*used in InfixExpr*/;
precedence left DOT/*used in StableId*/, _SelfType/*used in SelfType*/, RDARROW/*_FunctionArgTypes_withRDARROW*/;
// Rules

CompilationUnit ::=  TopStatSeq;
CompilationUnit ::=  PACKAGE QualId    SEMI CompilationUnit;

TopStatSeq        ::=  TopStat;
TopStatSeq        ::=  TopStatSeq SEMI TopStat;

QualId            ::=  ID;
QualId            ::=  QualId DOT ID;

TopStat           ::=  _AN_M_TmplDef;
TopStat           ::=  Import;
TopStat           ::=  Packaging;
TopStat           ::=  PackageObject;
TopStat           ::=  ;

_M_TmplDef          ::= TmplDef;
_M_TmplDef          ::= Modifier _M_TmplDef;

_AN_M_TmplDef       ::= _M_TmplDef;
_AN_M_TmplDef       ::= Annotation _AN_M_TmplDef;
_AN_M_TmplDef       ::= Annotation NL _AN_M_TmplDef;

Import            ::=  IMPORT ImportExpr;
Import            ::=  Import COMMA ImportExpr;

Packaging         ::=  PACKAGE QualId LBRACE TopStatSeq RBRACE;
Packaging         ::=  PACKAGE QualId NL LBRACE TopStatSeq RBRACE;

PackageObject     ::=  PACKAGE OBJECT ObjectDef;

TmplDef           ::=  CLASS ClassDef;
TmplDef           ::=  CASE_CLASS ClassDef;
TmplDef           ::=  OBJECT ObjectDef;
TmplDef           ::=  CASE_OBJECT ObjectDef;
TmplDef           ::=  TRAIT TraitDef;

Modifier          ::=  LocalModifier;
Modifier          ::=  AccessModifier;
Modifier          ::=  OVERRIDE;

Annotation        ::=  AT SimpleType;
Annotation        ::=  Annotation ArgumentExprs;

ImportExpr        ::=  StableId DOT ID;
ImportExpr        ::=  StableId DOT UNDERSCORE;
ImportExpr        ::=  StableId DOT ImportSelectors;

ObjectDef         ::=  ID ClassTemplateOpt;

ClassDef          ::=  ID _A_ClassParamClauses ClassTemplateOpt;
ClassDef          ::=  ID TypeParamClause _A_ClassParamClauses ClassTemplateOpt;

_A_ClassParamClauses    ::= ClassParamClauses;
_A_ClassParamClauses    ::= AccessModifier ClassParamClauses;
_A_ClassParamClauses    ::= ConstrAnnotation _A_ClassParamClauses;

TraitDef          ::=  ID TraitTemplateOpt;
TraitDef          ::=  ID TypeParamClause TraitTemplateOpt;

LocalModifier     ::=  ABSTRACT;
LocalModifier     ::=  FINAL;
LocalModifier     ::=  SEALED;
LocalModifier     ::=  IMPLICIT;
LocalModifier     ::=  LAZY;

AccessModifier    ::=  PRIVATE;
AccessModifier    ::=  PRIVATE AccessQualifier;
AccessModifier    ::=  PROTECTED;
AccessModifier    ::=  PROTECTED AccessQualifier;

SimpleType        ::=  SimpleType TypeArgs;
SimpleType        ::=  SimpleType HASH ID;
SimpleType        ::=  StableId;
SimpleType        ::=  Path DOT TYPE;
SimpleType        ::=  LPAREN Types RPAREN;

ArgumentExprs     ::=  LPAREN RPAREN;
ArgumentExprs     ::=  LPAREN Exprs RPAREN;
ArgumentExprs     ::=  LPAREN PostfixExpr COLON UNDERSCORE ASTERISK RPAREN;
ArgumentExprs     ::=  LPAREN Exprs COMMA PostfixExpr COLON UNDERSCORE ASTERISK RPAREN;

StableId          ::=  ID;
StableId          ::=  Path DOT ID;
StableId          ::=  SUPER DOT ID;
StableId          ::=  SUPER ClassQualifier DOT ID;
StableId          ::=  ID DOT SUPER DOT ID;
StableId          ::=  ID DOT SUPER ClassQualifier DOT ID;

ImportSelectors   ::=  LBRACE _ImportSelectors RBRACE;

_ImportSelectors    ::= ImportSelector;
_ImportSelectors    ::= UNDERSCORE;
_ImportSelectors    ::= ImportSelector COMMA _ImportSelectors;

ClassTemplateOpt  ::= EXTENDS ClassTemplate;
ClassTemplateOpt  ::= TemplateBody;
ClassTemplateOpt  ::= EXTENDS TemplateBody;

TypeParamClause   ::=  LBRACK _TypeParamClause RBRACK;

_TypeParamClause    ::= VariantTypeParam;
_TypeParamClause    ::= _TypeParamClause COMMA VariantTypeParam;

ClassParamClauses ::=  ;
ClassParamClauses ::=  _LPAREN_IMPLICIT ClassParams RPAREN;
ClassParamClauses ::=  _NL_LPAREN_IMPLICIT ClassParams RPAREN;
ClassParamClauses ::=  ClassParamClause ClassParamClauses;

ConstrAnnotation  ::=  AT SimpleType ArgumentExprs;

TraitTemplateOpt  ::=  ;
TraitTemplateOpt  ::=  TemplateBody;
TraitTemplateOpt  ::=  EXTENDS TemplateBody;
TraitTemplateOpt  ::=  EXTENDS TraitTemplate;

AccessQualifier   ::=  LBRACK ID RBRACK;
AccessQualifier   ::=  LBRACK THIS RBRACK;

TypeArgs          ::=  LBRACK Types RBRACK;

Path              ::=  StableId;
Path              ::=  THIS;
Path              ::=  ID DOT THIS;

Types             ::=  Type;
Types             ::=  Types COMMA Type;

Exprs             ::=  Expr;
Exprs             ::=  Exprs COMMA Expr;

PostfixExpr       ::=  InfixExpr;
PostfixExpr       ::=  InfixExpr ID;
PostfixExpr       ::=  InfixExpr ID NL;

BlockExpr         ::=  LBRACE CaseClauses RBRACE;
BlockExpr         ::=  LBRACE Block RBRACE;

ClassQualifier    ::=  LBRACK ID RBRACK;

ImportSelector    ::=  ID;
ImportSelector    ::=  ID RDARROW ID;
ImportSelector    ::=  ID RDARROW UNDERSCORE;

ClassTemplate     ::=  ClassParents;
ClassTemplate     ::=  ClassParents TemplateBody;
ClassTemplate     ::=  EarlyDefs ClassParents;
ClassTemplate     ::=  EarlyDefs ClassParents TemplateBody;

TemplateBody      ::=  LBRACE _TemplateBody RBRACE;
TemplateBody      ::=  LBRACE SelfType _TemplateBody RBRACE;
TemplateBody      ::=  _NL_LBRACE _TemplateBody RBRACE;
TemplateBody      ::=  _NL_LBRACE SelfType _TemplateBody RBRACE;

_TemplateBody       ::= TemplateStat;
_TemplateBody       ::= _TemplateBody SEMI TemplateStat;

VariantTypeParam  ::=  TypeParam;
VariantTypeParam  ::=  PLUS TypeParam;
VariantTypeParam  ::=  MINUS TypeParam;
VariantTypeParam  ::=  Annotation VariantTypeParam;

ClassParams       ::=  ClassParam;
ClassParams       ::=  ClassParams COMMA ClassParam;

ClassParamClause  ::=  LPAREN RPAREN;
ClassParamClause  ::=  LPAREN ClassParams RPAREN;
ClassParamClause  ::=  NL LPAREN RPAREN;
ClassParamClause  ::=  NL LPAREN ClassParams RPAREN;

TraitTemplate     ::=  TraitParents;
TraitTemplate     ::=  TraitParents TemplateBody;
TraitTemplate     ::=  EarlyDefs TraitParents;
TraitTemplate     ::=  EarlyDefs TraitParents TemplateBody;

Type              ::=  _FunctionArgTypes_withRDARROW Type;
Type              ::=  InfixType;
Type              ::=  InfixType ExistentialClause;
Type              ::=  RDARROW Type;
Type              ::=  Type ASTERISK;

Expr              ::=  Bindings RDARROW Expr;
Expr              ::=  ID RDARROW Expr;
Expr              ::=  IMPLICIT ID RDARROW Expr;
Expr              ::=  UNDERSCORE RDARROW Expr;

InfixExpr         ::=  PrefixExpr;
InfixExpr         ::=  InfixExpr ID InfixExpr;
InfixExpr         ::=  InfixExpr ID NL InfixExpr;

CaseClauses       ::=  CaseClause;
CaseClauses       ::=  CaseClauses CaseClause;

Block             ::=  _Block;

_Block            ::=  BlockStat;
_Block            ::=  _Block SEMI BlockStat;

ClassParents      ::=  Constr;
ClassParents      ::=  ClassParents WITH AnnotType;

EarlyDefs         ::= LBRACE _RBRACE_WITH;
EarlyDefs         ::= LBRACE _EarlyDefs _RBRACE_WITH;

_EarlyDefs        ::= EarlyDef;
_EarlyDefs        ::= _EarlyDefs SEMI EarlyDef;

SelfType          ::=  ID RDARROW %prec _SelfType;
SelfType          ::=  ID COLON Type RDARROW;
SelfType          ::=  THIS COLON Type RDARROW;

TemplateStat      ::=  Import;
TemplateStat      ::=  _AN_M_Def;
TemplateStat      ::=  _AN_M_Dcl;
TemplateStat      ::=  Expr;
TemplateStat      ::=  ;

_AN_M_Def         ::=  _M_Def;
_AN_M_Def         ::=  Annotation _AN_M_Def;
_AN_M_Def         ::=  Annotation NL _AN_M_Def;

_M_Def            ::=  Def;
_M_Def            ::=  Modifier _M_Def;

_AN_M_Dcl         ::=  _M_Dcl;
_AN_M_Dcl         ::=  Annotation _AN_M_Dcl;
_AN_M_Dcl         ::=  Annotation NL _AN_M_Dcl;

_M_Dcl            ::=  Dcl;
_M_Dcl            ::=  Modifier _M_Dcl;

TypeParam         ::=  _TypeParam;
TypeParam         ::=  TypeParam COLON Type;

_TypeParam        ::=  UNDERSCORE;
_TypeParam        ::=  UNDERSCORE UBOUNDS Type;
_TypeParam        ::=  UNDERSCORE LBOUNDS Type;
_TypeParam        ::=  UNDERSCORE LBOUNDS Type UBOUNDS Type;
_TypeParam        ::=  UNDERSCORE TypeParamClause;
_TypeParam        ::=  UNDERSCORE TypeParamClause UBOUNDS Type;
_TypeParam        ::=  UNDERSCORE TypeParamClause LBOUNDS Type;
_TypeParam        ::=  UNDERSCORE TypeParamClause LBOUNDS Type UBOUNDS Type;
_TypeParam        ::=  ID;
_TypeParam        ::=  ID UBOUNDS Type;
_TypeParam        ::=  ID LBOUNDS Type;
_TypeParam        ::=  ID LBOUNDS Type UBOUNDS Type;
_TypeParam        ::=  ID TypeParamClause;
_TypeParam        ::=  ID TypeParamClause UBOUNDS Type;
_TypeParam        ::=  ID TypeParamClause LBOUNDS Type;
_TypeParam        ::=  ID TypeParamClause LBOUNDS Type UBOUNDS Type;
_TypeParam        ::=  _TypeParam VBOUNDS Type;

ClassParam        ::=  _ClassParam;
ClassParam        ::=  Annotation ClassParam;

_ClassParam       ::=  ID COLON Type;
_ClassParam       ::=  ID COLON Type EQ Expr;
_ClassParam       ::=  VAR ID COLON Type;
_ClassParam       ::=  VAR ID COLON Type EQ Expr;
_ClassParam       ::=  VAL ID COLON Type;
_ClassParam       ::=  VAL ID COLON Type EQ Expr;
_ClassParam       ::=  Modifier _ClassParam;

TraitParents      ::=  AnnotType;
TraitParents      ::=  TraitParents WITH AnnotType;

_FunctionArgTypes_withRDARROW  ::=  InfixType RDARROW;
_FunctionArgTypes_withRDARROW  ::=  LPAREN RPAREN RDARROW;

InfixType         ::=  CompoundType;
InfixType         ::=  InfixType ID CompoundType;
InfixType         ::=  InfixType ID NL CompoundType;

ExistentialClause ::=  FORSOME LBRACE _ExistentialClause RBRACE;

_ExistentialClause ::=  ExistentialDcl;
_ExistentialClause ::=  _ExistentialClause SEMI ExistentialDcl;

Bindings          ::=  LPAREN _Bindings RPAREN;

_Bindings         ::=  Binding;
_Bindings         ::=  _Bindings COMMA Binding;

PrefixExpr        ::=  MINUS SimpleExpr;
PrefixExpr        ::=  PLUS SimpleExpr;
PrefixExpr        ::=  TILDE SimpleExpr;
PrefixExpr        ::=  EXCLAM SimpleExpr;

CaseClause        ::=  CASE Pattern RDARROW Block;
CaseClause        ::=  CASE Pattern Guard RDARROW Block;

BlockStat         ::=  Import;
BlockStat         ::=  _A_Def;
BlockStat         ::=  _A_LM_TmplDef;
BlockStat         ::=  Expr1;
BlockStat         ::=  ;

_A_Def            ::=  Def;
_A_Def            ::=  IMPLICIT Def;
_A_Def            ::=  LAZY Def;
_A_Def            ::=  Annotation _A_Def;

_A_LM_TmplDef     ::=  _LM_TmplDef;
_A_LM_TmplDef     ::=  Annotation _A_LM_TmplDef;

_LM_TmplDef       ::=  TmplDef;
_LM_TmplDef       ::=  LocalModifier _LM_TmplDef;

Constr            ::=  AnnotType;
Constr            ::=  Constr ArgumentExprs;

AnnotType         ::=  SimpleType;
AnnotType         ::=  AnnotType Annotation;

EarlyDef          ::=  _M_PatVarDef;
EarlyDef          ::=  Annotation EarlyDef;
EarlyDef          ::=  Annotation NL EarlyDef;

_M_PatVarDef        ::= PatVarDef;
_M_PatVarDef        ::= Modifier _M_PatVarDef;

Def               ::=  PatVarDef;
Def               ::=  DEF FunDef;
Def               ::=  TYPE TypeDef;
Def               ::=  TYPE NL TypeDef;
Def               ::=  TmplDef;

Dcl               ::=  VAL ValDcl;
Dcl               ::=  VAR VarDcl;
Dcl               ::=  DEF FunDcl;
Dcl               ::=  TYPE TypeDcl;
Dcl               ::=  TYPE NL TypeDcl;

CompoundType      ::=  _CompoundType;
CompoundType      ::=  _CompoundType Refinement;
CompoundType      ::=  Refinement;

_CompoundType        ::= AnnotType;
_CompoundType        ::= _CompoundType WITH AnnotType;















