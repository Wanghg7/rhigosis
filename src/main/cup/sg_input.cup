package wanghg.rhigosis;

import scala.collection.mutable.ListBuffer;

terminal SYMBOL;
terminal LHS;
terminal BAR;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal LPAREN;
terminal RPAREN;
terminal LITERAL;

nonterminal grammar;
nonterminal production;
nonterminal rhs;
nonterminal productions;
nonterminal term;
nonterminal concatenation;
nonterminal alternation;
nonterminal grouping;
nonterminal optional;
nonterminal repetition;

start with grammar;

grammar         ::= productions:ps {:
    RESULT = SGUtils.grammar((ListBuffer<Production>)ps);
:};

productions       ::= production:p {:
    RESULT = SGUtils.listBuffer(p);
:}
                  | productions:ps production:p {:
    RESULT = SGUtils.listBuffer((ListBuffer<Production>)ps, (Production)p);
:};

production            ::= LHS:l rhs:r {:
    RESULT = SGUtils.production((String)l, (Rhs)r);
:};

rhs             ::= alternation:alt {:
    RESULT = SGUtils.rhs(SGUtils.alternation((ListBuffer<Concatenation>)alt));
:}
                  | alternation:alt BAR {:
    RESULT = SGUtils.rhs(SGUtils.alternation(SGUtils.listBuffer((ListBuffer<Concatenation>)alt, SGUtils.concatenation())));
:};

alternation         ::= concatenation:cat {:
    RESULT = SGUtils.listBuffer(SGUtils.concatenation((ListBuffer<Term>)cat));
:}
                      | alternation:alt BAR concatenation:cat {:
    RESULT = SGUtils.listBuffer((ListBuffer<Concatenation>)alt, SGUtils.concatenation((ListBuffer<Term>)cat));
:};

concatenation        ::= term:t {:
    RESULT = SGUtils.listBuffer((Term)t);
:}
                  | concatenation:cat term:t {:
    RESULT = SGUtils.listBuffer((ListBuffer<Term>)cat, (Term)t);
:};

term            ::= SYMBOL:sym {:
    RESULT = SGUtils.symbol((String)sym);
:}
                  | LITERAL:lit {:
    RESULT = SGUtils.literal((String)lit);
:}
                  | grouping:grp {:
    RESULT = grp;
:}
                  | optional:opt {:
    RESULT = opt;
:}
                  | repetition:rep {:
    RESULT = rep;
:};

grouping           ::= LPAREN alternation:alt RPAREN {:
    RESULT = SGUtils.grouping(SGUtils.alternation((ListBuffer<Concatenation>)alt));
:};

optional     ::= LBRACK alternation:alt RBRACK {:
    RESULT = SGUtils.optional(SGUtils.alternation((ListBuffer<Concatenation>)alt));
:};

repetition    ::= LBRACE alternation:alt RBRACE {:
    RESULT = SGUtils.repetition(SGUtils.alternation((ListBuffer<Concatenation>)alt));
:};



























