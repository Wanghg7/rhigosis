package wanghg.rhigosis;

import scala.collection.mutable.ListBuffer;

terminal ID;
terminal LHS;
terminal BAR;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal LPAREN;
terminal RPAREN;
terminal LITERAL;

nonterminal grammar;
nonterminal prod;
nonterminal rhs;
nonterminal prod_list;
nonterminal term;
nonterminal sequence;
nonterminal options;
nonterminal group;
nonterminal zero_or_one;
nonterminal zero_or_more;

start with grammar;

grammar         ::= prod_list:pl {:
    RESULT = SGUtils.createGrammar((ListBuffer<Production>)pl);
:};

prod_list       ::= prod:p {:
    RESULT = SGUtils.createListBuffer(p);
:}
                  | prod_list:g prod:p {:
    RESULT = SGUtils.createListBuffer((ListBuffer<Production>)g, (Production)p);
:};

prod            ::= LHS:id rhs:r {:
    RESULT = SGUtils.createProd((String)id, (Rhs)r);
:};

rhs             ::= options:o {:
    ListBuffer<Concatenation> os = (ListBuffer<Concatenation>)o;
    RESULT = SGUtils.createRhs(SGUtils.createOptions(os));
:}
                  | options:o BAR {:
    ListBuffer<Concatenation> os =
        SGUtils.createListBuffer((ListBuffer<Concatenation>)o, SGUtils.createSequence());
    RESULT = SGUtils.createRhs(SGUtils.createOptions(os));
:};

options         ::= sequence:s {:
    RESULT = SGUtils.createListBuffer(SGUtils.createSequence((ListBuffer<Term>)s));
:}
                  | options:o BAR sequence:s {:
    RESULT = SGUtils.createListBuffer((ListBuffer<Concatenation>)o, SGUtils.createSequence((ListBuffer<Term>)s));
:};

sequence        ::= term:t {:
    RESULT = SGUtils.createListBuffer((Term)t);
:}
                  | sequence:s term:t {:
    RESULT = SGUtils.createListBuffer((ListBuffer<Term>)s, (Term)t);
:};

term            ::= ID:id {:
    RESULT = SGUtils.id((String)id);
:}
                  | LITERAL:lit {:
    RESULT = SGUtils.literal((String)lit);
:}
                  | group:g {:
    RESULT = g;
:}
                  | zero_or_one:zoo {:
    RESULT = zoo;
:}
                  | zero_or_more:zom {:
    RESULT = zom;
:};

group           ::= LPAREN options:o RPAREN {:
    RESULT = SGUtils.group(SGUtils.createOptions((ListBuffer<Concatenation>)o));
:};

zero_or_one     ::= LBRACK options:o RBRACK {:
    RESULT = SGUtils.zero_or_one(SGUtils.createOptions((ListBuffer<Concatenation>)o));
:};

zero_or_more    ::= LBRACE options:o RBRACE {:
    RESULT = SGUtils.zero_or_more(SGUtils.createOptions((ListBuffer<Concatenation>)o));
:};



























