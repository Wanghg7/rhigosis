package wanghg.rhigosis;

terminal PACKAGE;
terminal SEMI;
terminal ID;
terminal DOT;
terminal IMPORT;
terminal COMMA;
terminal LBRACE;
terminal RBRACE;
terminal NL;
terminal OBJECT;
terminal CLASS;
terminal CASE;
terminal TRAIT;
terminal OVERRIDE;
terminal AT;
terminal UNDERSCORE;
terminal ABSTRACT;
terminal FINAL;
terminal SEALED;
terminal IMPLICIT;
terminal LAZY;
terminal PRIVATE;
terminal AccessQualifier;
terminal PROTECTED;
terminal HASH;
terminal TYPE;
terminal LPAREN;
terminal RPAREN;
terminal COLON;
terminal ASTERISK;
terminal SUPER;
terminal EXTENDS;
terminal LBRACK;
terminal RBRACK;
terminal THIS;
terminal RDARROW;
terminal PLUS;
terminal MINUS;
terminal WITH;
terminal UBOUNDS;
terminal LBOUNDS;
terminal VBOUNDS;
terminal EQ;
terminal VAR;
terminal VAL;
terminal FORSOME;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal TRY;
terminal FINALLY;
terminal CATCH;
terminal DO;
terminal FOR;
terminal THROW;
terminal RETURN;
terminal MATCH;
terminal YIELD;
terminal TILDE;
terminal EXCLAM;
terminal UNARY;
terminal DEF;
// TODO
terminal ExistentialDcl;
terminal Binding;
terminal Enumerators;
terminal SimpleExpr;
terminal SimpleExpr1;
terminal Ascription;
terminal Pattern;
terminal Guard;
terminal PatVarDef;
terminal FunDef;
terminal ValDcl;
terminal VarDcl;
terminal FunDcl;
terminal TypeDcl;
terminal Refinement;
// DONE
nonterminal CompilationUnit;
nonterminal QualId;
nonterminal TopStatSeq;
nonterminal TopStat;
nonterminal A_M_TmplDef;
nonterminal M_TmplDef;
nonterminal Import;
nonterminal Packaging;
nonterminal PackageObject;
nonterminal TmplDef;
nonterminal Modifier;
nonterminal Annotation;
nonterminal ImportExpr;
nonterminal ObjectDef;
nonterminal ClassDef;
nonterminal A_M_ClassParamClauses;
nonterminal M_ClassParamClauses;
nonterminal TraitDef;
nonterminal LocalModifier;
nonterminal AccessModifier;
nonterminal SimpleType;
nonterminal ArgumentExprs;
nonterminal StableId;
nonterminal _ImportSelectors;
nonterminal ClassTemplateOpt;
nonterminal _TypeParamClause;
nonterminal _ClassParamClauses;
nonterminal ConstrAnnotation;
nonterminal TraitTemplateOpt;
nonterminal TypeArgs;
nonterminal Path;
nonterminal Types;
nonterminal Exprs;
nonterminal PostfixExpr;
nonterminal BlockExpr;
nonterminal ClassQualifier;
nonterminal ImportSelector;
nonterminal _TemplateBody;
nonterminal ClassTemplate;
nonterminal VariantTypeParam;
nonterminal ClassParams;
nonterminal ClassParamClause;
nonterminal TraitTemplate;
nonterminal Type;
nonterminal Expr;
nonterminal InfixExpr;
nonterminal CaseClauses;
nonterminal _Block;
nonterminal TemplateStat;
nonterminal M_Dcl;
nonterminal A_M_Dcl;
nonterminal M_Def;
nonterminal A_M_Def;
nonterminal SelfType;
nonterminal ClassParents;
nonterminal _TypeParam;
nonterminal TypeParam_V;
nonterminal TypeParam_V_C;
nonterminal TypeParamClause;
nonterminal _ClassParam;
nonterminal A_M_ClassParam;
nonterminal M_ClassParam;
nonterminal TraitParents;
nonterminal FunctionArgTypes;
nonterminal _ParamTypes;
nonterminal InfixType;
nonterminal ExistentialClause;
nonterminal _ExistentialDcls;
nonterminal Bindings;
nonterminal _Bindings;
nonterminal Expr1;
nonterminal N_Expr;
nonterminal N_Y_Expr;
nonterminal Expr1_return;
nonterminal PrefixExpr;
nonterminal CaseClause;
nonterminal ResultExpr;
nonterminal BlockStat;
nonterminal A_Def;
nonterminal A_LM_TmplDef;
nonterminal LM_TmplDef;
nonterminal Def;
nonterminal N_TypeDef;
nonterminal TypeDef;
nonterminal Def_withoutTmplDef;
nonterminal Dcl;
nonterminal N_TypeDcl;
nonterminal Constr;
nonterminal AnnotType;
nonterminal ParamType;
nonterminal CompoundType;
nonterminal _AnnotTypes;
//
precedence left UNDERSCORE, IMPLICIT, SimpleExpr1, SimpleExpr;
//
precedence left FINALLY, RDARROW, NL, ID, CATCH, SEMI, ELSE, WHILE, TRY, DO, IF, FOR, THROW, RETURN,
    LBRACE;
precedence left PLUS, MINUS;
precedence left UNARY, EXCLAM, TILDE, LPAREN;
precedence left DOT;

CompilationUnit  ::=  PACKAGE QualId SEMI CompilationUnit
                    | TopStatSeq;

TopStatSeq       ::=  TopStat | TopStatSeq SEMI TopStat;

TopStat          ::=  A_M_TmplDef
                   |  Import
                   |  Packaging
                   |  PackageObject
                   |
                   ;

M_TmplDef   ::= TmplDef | Modifier M_TmplDef;

A_M_TmplDef ::= M_TmplDef | Annotation A_M_TmplDef;

QualId           ::=  ID | QualId DOT ID;

Import            ::=  IMPORT ImportExpr | Import COMMA ImportExpr;

Packaging         ::=  PACKAGE QualId LBRACE TopStatSeq RBRACE
                    | PACKAGE QualId NL LBRACE TopStatSeq RBRACE
                    ;

PackageObject     ::=  PACKAGE OBJECT ObjectDef
                      ;

TmplDef           ::=   CLASS ClassDef
                      | CASE CLASS ClassDef
                      |  OBJECT ObjectDef
                      |  CASE OBJECT ObjectDef
                      |  TRAIT TraitDef
                      ;

Modifier          ::=  LocalModifier
                      |  AccessModifier
                      |  OVERRIDE
                      ;

Annotation        ::=  AT SimpleType | Annotation ArgumentExprs
                    ;

ImportExpr        ::=  StableId DOT ID
                    |  StableId DOT UNDERSCORE
                    |  StableId DOT LBRACE _ImportSelectors RBRACE
                    ;

ObjectDef         ::=  ID ClassTemplateOpt;

ClassDef          ::=  ID  ClassTemplateOpt
                    |  ID  A_M_ClassParamClauses ClassTemplateOpt
                    |   ID LBRACK _TypeParamClause RBRACK ClassTemplateOpt
                    |   ID LBRACK _TypeParamClause RBRACK A_M_ClassParamClauses ClassTemplateOpt
                    ;

_ClassParamClauses ::= LPAREN IMPLICIT ClassParams RPAREN
                    | NL LPAREN IMPLICIT ClassParams RPAREN
                    | ClassParamClause
                    | ClassParamClause _ClassParamClauses
                    ;

M_ClassParamClauses ::= _ClassParamClauses | AccessModifier _ClassParamClauses;

A_M_ClassParamClauses   ::= M_ClassParamClauses | ConstrAnnotation A_M_ClassParamClauses;

TraitDef          ::=  ID TraitTemplateOpt
                    | ID LBRACK _TypeParamClause RBRACK TraitTemplateOpt;

LocalModifier     ::=  ABSTRACT |  FINAL |  SEALED |  IMPLICIT |  LAZY ;

AccessModifier    ::=  PRIVATE
                    |  PRIVATE AccessQualifier
                    |  PROTECTED
                    |  PROTECTED AccessQualifier
                    ;

SimpleType        ::=  SimpleType TypeArgs
                      |  SimpleType HASH ID
                      |  StableId
                      |  Path DOT TYPE
                      |  LPAREN Types RPAREN
                      ;

ArgumentExprs     ::=  LPAREN RPAREN
                      | LPAREN Exprs RPAREN
                      |  LPAREN PostfixExpr COLON UNDERSCORE ASTERISK RPAREN
                      |  LPAREN Exprs COMMA PostfixExpr COLON UNDERSCORE ASTERISK RPAREN
                      |  BlockExpr
                      |  NL BlockExpr
                      ;

StableId          ::=  ID
                      |  Path DOT ID
                      |  SUPER DOT ID
                      |  SUPER ClassQualifier DOT ID
                      |  ID DOT SUPER DOT ID
                      |  ID DOT SUPER ClassQualifier DOT ID
                      ;

_ImportSelectors   ::=  ImportSelector | UNDERSCORE | ImportSelector COMMA _ImportSelectors;

ClassTemplateOpt  ::=
                    | LBRACE _TemplateBody RBRACE
                    | LBRACE  RBRACE
                    | NL LBRACE _TemplateBody RBRACE
                    | NL LBRACE  RBRACE
                    | EXTENDS LBRACE _TemplateBody RBRACE
                    | EXTENDS LBRACE  RBRACE
                    | EXTENDS NL LBRACE _TemplateBody RBRACE
                    | EXTENDS NL LBRACE  RBRACE
                    | EXTENDS ClassTemplate
                    ;

_TypeParamClause   ::=  VariantTypeParam | _TypeParamClause COMMA VariantTypeParam;

ConstrAnnotation  ::=  AT SimpleType ArgumentExprs;

TraitTemplateOpt  ::=
                    | LBRACE _TemplateBody RBRACE
                    | LBRACE  RBRACE
                    | NL LBRACE _TemplateBody RBRACE
                    | NL LBRACE  RBRACE
                    | EXTENDS LBRACE _TemplateBody RBRACE
                    | EXTENDS LBRACE  RBRACE
                    | EXTENDS NL LBRACE _TemplateBody RBRACE
                    | EXTENDS NL LBRACE  RBRACE
                    | EXTENDS TraitTemplate
                    ;

TypeArgs          ::=  LBRACK Types RBRACK;

Path              ::=  StableId
                      |  THIS
                      |  ID DOT THIS
                      ;

Types             ::=  Type | Types COMMA Type;

Exprs             ::=  Expr | Exprs COMMA Expr;

PostfixExpr       ::=  InfixExpr
                    |  InfixExpr ID
                    |  InfixExpr ID NL
                    ;

BlockExpr         ::=  LBRACE CaseClauses RBRACE
                    |  LBRACE _Block RBRACE
                    |  LBRACE _Block ResultExpr RBRACE
                    ;

ClassQualifier    ::=  LBRACK ID RBRACK;

ImportSelector    ::=  ID
                    |  ID RDARROW ID
                    |  ID RDARROW UNDERSCORE
                    ;

_TemplateBody      ::=  TemplateStat
                    | SelfType
                    | SelfType TemplateStat
                    | _TemplateBody SEMI TemplateStat
                    | _TemplateBody SEMI
                    ;

ClassTemplate     ::=  ClassParents
                    |  ClassParents LBRACE _TemplateBody RBRACE
                    |  ClassParents LBRACE  RBRACE
                    |  ClassParents NL LBRACE _TemplateBody RBRACE
                    |  ClassParents NL LBRACE  RBRACE
                    |  LBRACE               RBRACE WITH ClassParents
                    |  LBRACE _TemplateBody RBRACE WITH ClassParents
                    |  LBRACE               RBRACE WITH ClassParents LBRACE _TemplateBody RBRACE
                    |  LBRACE               RBRACE WITH ClassParents LBRACE  RBRACE
                    |  LBRACE _TemplateBody RBRACE WITH ClassParents LBRACE _TemplateBody RBRACE
                    |  LBRACE _TemplateBody RBRACE WITH ClassParents LBRACE  RBRACE
                    |  LBRACE               RBRACE WITH ClassParents NL LBRACE _TemplateBody RBRACE
                    |  LBRACE               RBRACE WITH ClassParents NL LBRACE  RBRACE
                    |  LBRACE _TemplateBody RBRACE WITH ClassParents NL LBRACE _TemplateBody RBRACE
                    |  LBRACE _TemplateBody RBRACE WITH ClassParents NL LBRACE  RBRACE
                    ;

VariantTypeParam  ::=  TypeParam_V_C
                    |  PLUS TypeParam_V_C
                    |  MINUS TypeParam_V_C
                    |  Annotation VariantTypeParam
                    ;

ClassParams       ::=  A_M_ClassParam | ClassParams COMMA A_M_ClassParam;

ClassParamClause  ::=  LPAREN RPAREN
                    |  LPAREN ClassParams RPAREN
                    |  NL LPAREN RPAREN
                    |  NL LPAREN ClassParams RPAREN
                    ;

TraitTemplate     ::=  TraitParents
                    |  TraitParents LBRACE _TemplateBody RBRACE
                    |  TraitParents LBRACE  RBRACE
                    |  TraitParents NL LBRACE _TemplateBody RBRACE
                    |  TraitParents NL LBRACE  RBRACE
                    |  LBRACE  RBRACE WITH TraitParents
                    |  LBRACE _TemplateBody RBRACE WITH TraitParents
                    |  LBRACE  RBRACE WITH TraitParents LBRACE _TemplateBody RBRACE
                    |  LBRACE  RBRACE WITH TraitParents LBRACE  RBRACE
                    |  LBRACE _TemplateBody RBRACE WITH TraitParents LBRACE _TemplateBody RBRACE
                    |  LBRACE _TemplateBody RBRACE WITH TraitParents LBRACE  RBRACE
                    |  LBRACE  RBRACE WITH TraitParents NL LBRACE _TemplateBody RBRACE
                    |  LBRACE  RBRACE WITH TraitParents NL LBRACE  RBRACE
                    |  LBRACE _TemplateBody RBRACE WITH TraitParents NL LBRACE _TemplateBody RBRACE
                    |  LBRACE _TemplateBody RBRACE WITH TraitParents NL LBRACE  RBRACE
                    ;

Type              ::=  FunctionArgTypes Type
                      |  InfixType
                      |  InfixType ExistentialClause
                      ;

Expr              ::=  Bindings RDARROW Expr
                    |  ID RDARROW Expr
                    |  IMPLICIT ID RDARROW Expr
                    |  UNDERSCORE RDARROW Expr
                    |  Expr1
                    ;

InfixExpr         ::=  PrefixExpr
                      |  InfixExpr ID InfixExpr
                      |  InfixExpr ID NL InfixExpr
                      ;

CaseClauses       ::=  CaseClause | CaseClauses CaseClause
                    ;

_Block             ::=  BlockStat | _Block SEMI BlockStat
                    ;

TemplateStat      ::=  Import
                      |  A_M_Def
                      |  A_M_Dcl
                      |  Expr
                      ;

M_Def               ::= Def
                      | Modifier M_Def
                      ;

A_M_Def             ::= M_Def
                      | Annotation A_M_Def
                      | Annotation NL A_M_Def
                      ;

M_Dcl               ::= Dcl
                      | Modifier M_Dcl
                      ;

A_M_Dcl             ::= M_Dcl
                      | Annotation A_M_Dcl
                      | Annotation NL A_M_Dcl
                      ;

SelfType          ::=  ID RDARROW
                      | ID COLON Type RDARROW
                      |  THIS COLON Type RDARROW
                      %prec NL;

ClassParents      ::=  Constr | ClassParents WITH AnnotType;

_TypeParam         ::=   UNDERSCORE
                       | UNDERSCORE UBOUNDS Type
                       | UNDERSCORE LBOUNDS Type
                       | UNDERSCORE LBOUNDS Type UBOUNDS Type
                       | UNDERSCORE TypeParamClause
                       | UNDERSCORE TypeParamClause UBOUNDS Type
                       | UNDERSCORE TypeParamClause LBOUNDS Type
                       | UNDERSCORE TypeParamClause LBOUNDS Type UBOUNDS Type
                       | ID
                       | ID UBOUNDS Type
                       | ID LBOUNDS Type
                       | ID LBOUNDS Type UBOUNDS Type
                       | ID TypeParamClause
                       | ID TypeParamClause UBOUNDS Type
                       | ID TypeParamClause LBOUNDS Type
                       | ID TypeParamClause LBOUNDS Type UBOUNDS Type
                       ;

TypeParam_V         ::= _TypeParam | TypeParam_V VBOUNDS Type;

TypeParam_V_C       ::= TypeParam_V | TypeParam_V_C COLON Type;

_ClassParam         ::=   ID COLON ParamType
                        | ID COLON ParamType EQ Expr
                        | VAR ID COLON ParamType
                        | VAR ID COLON ParamType EQ Expr
                        | VAL ID COLON ParamType
                        | VAL ID COLON ParamType EQ Expr
                        ;

M_ClassParam        ::= _ClassParam | Modifier M_ClassParam;

A_M_ClassParam      ::= M_ClassParam | Annotation A_M_ClassParam;

TraitParents      ::=  AnnotType | TraitParents WITH AnnotType;

FunctionArgTypes  ::= InfixType RDARROW
                    | LPAREN RPAREN RDARROW
                    | LPAREN _ParamTypes RPAREN RDARROW
                    ;

_ParamTypes         ::= ParamType | _ParamTypes COMMA ParamType;

InfixType         ::=  CompoundType | InfixType ID CompoundType | InfixType ID NL CompoundType;

ExistentialClause ::=  FORSOME LBRACE _ExistentialDcls RBRACE;

_ExistentialDcls    ::= ExistentialDcl | _ExistentialDcls SEMI ExistentialDcl;

Bindings          ::=  LPAREN _Bindings RPAREN;

_Bindings          ::=  Binding | _Bindings COMMA Binding;

Expr1             ::=    IF LPAREN Expr RPAREN N_Expr
                      |  IF LPAREN Expr RPAREN N_Expr ELSE Expr
                      |  IF LPAREN Expr RPAREN N_Expr SEMI ELSE Expr
                      |  WHILE LPAREN Expr RPAREN N_Expr
                      |  TRY LBRACE _Block ResultExpr RBRACE
                      |  TRY LBRACE _Block ResultExpr RBRACE FINALLY Expr
                      |  TRY LBRACE _Block ResultExpr RBRACE CATCH LBRACE CaseClauses RBRACE
                      |  TRY LBRACE _Block ResultExpr RBRACE CATCH LBRACE CaseClauses RBRACE FINALLY Expr
                      |  TRY Expr
                      |  TRY Expr FINALLY Expr
                      |  TRY Expr CATCH LBRACE CaseClauses RBRACE
                      |  TRY Expr CATCH LBRACE CaseClauses RBRACE FINALLY Expr
                      |  DO Expr WHILE LPAREN Expr RPAREN
                      |  DO Expr SEMI WHILE LPAREN Expr RPAREN
                      |  FOR LBRACE Enumerators RBRACE N_Y_Expr
                      |  FOR LPAREN Enumerators RPAREN N_Y_Expr
                      |  THROW Expr
                      |  Expr1_return
                      |  RETURN Expr
                      |  ID EQ Expr
                      |  SimpleExpr DOT ID EQ Expr
                      |  SimpleExpr1 ArgumentExprs EQ Expr
                      |  PostfixExpr
                      |  PostfixExpr Ascription
                      |  PostfixExpr MATCH LBRACE CaseClauses RBRACE
                      ;

Expr1_return        ::= RETURN %prec NL;

N_Y_Expr            ::= Expr
                      | YIELD Expr
                      | NL N_Y_Expr
                      ;

N_Expr              ::= Expr
                      | NL N_Expr
                      ;

PrefixExpr        ::=  SimpleExpr
                    |  MINUS SimpleExpr
                    |  PLUS SimpleExpr
                    |  TILDE SimpleExpr
                    |  EXCLAM SimpleExpr
                    %prec UNARY
                    ;

CaseClause        ::=  CASE Pattern RDARROW _Block ResultExpr
                    |  CASE Pattern Guard RDARROW _Block ResultExpr
                    ;

ResultExpr        ::=  Expr1
                      |  Bindings RDARROW _Block ResultExpr
                      |  UNDERSCORE COLON CompoundType RDARROW _Block ResultExpr
                      |  ID COLON CompoundType RDARROW _Block ResultExpr
                      |  IMPLICIT ID COLON CompoundType RDARROW _Block ResultExpr
                      ;

BlockStat         ::=
                      |  Import
                      |  A_Def
                      |  A_LM_TmplDef
                      |  Expr1
                      ;

A_Def               ::= Def_withoutTmplDef
                      | IMPLICIT Def_withoutTmplDef
                      | LAZY Def_withoutTmplDef
                      | Annotation A_Def
                      ;

LM_TmplDef          ::= TmplDef
                      | LocalModifier LM_TmplDef
                      ;

A_LM_TmplDef        ::= LM_TmplDef
                      | Annotation A_LM_TmplDef
                      ;

Def               ::=  PatVarDef
                      |  DEF FunDef
                      |  TYPE N_TypeDef
                      |  TmplDef
                      ;

Def_withoutTmplDef  ::=  PatVarDef
                      |  DEF FunDef
                      |  TYPE N_TypeDef
                      ;

N_TypeDef       ::= TypeDef | NL N_TypeDef;

Dcl               ::=    VAL ValDcl
                      |  VAR VarDcl
                      |  DEF FunDcl
                      |  TYPE N_TypeDcl
                      ;

N_TypeDcl       ::= TypeDcl | NL N_TypeDcl;

Constr            ::=  AnnotType | Constr ArgumentExprs;

AnnotType         ::=  SimpleType | AnnotType Annotation;

ParamType         ::=  Type
                      |  RDARROW Type
                      |  Type ASTERISK
                      ;

CompoundType      ::=    _AnnotTypes
                      |  _AnnotTypes Refinement
                      |  Refinement;

_AnnotTypes     ::= AnnotType | _AnnotTypes WITH AnnotType;











